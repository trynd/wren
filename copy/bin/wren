#!/bin/sh
#
# NAME
#
#   wren
#
# DESCRIPTION
#
#   Control script for public-facing platform functionality.
#
# AUTHOR
#
#   Originally written by Michael Spencer.
#   Maintained by the Wren project developers.
#
#
# The Wren project; Copyright 2013-2015 the Wren project developers.
# See the COPYRIGHT file in the top-level directory of this distribution
# for individual attributions.
#
# This file is part of the Wren project. It is subject to the license terms
# in the LICENSE file found in the top-level directory of this distribution.
# No part of the Wren project, including this file, may be copied, modified,
# propagated, or distributed except according to the terms contained in the
# LICENSE file.
#
# This program comes with ABSOLUTELY NO WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# LICENSE file found in the top-level directory of this distribution for
# more details.
#

###
### CONFIG
###

# clean environment
unset IFS
PATH=/usr/sbin:/usr/bin:/sbin:/bin

# ensure platform name is defined
test x"${RUN_ENV_PLATFORM_PATH}" = x \
    && { echo "Could not determine platform environment path - exiting..." >&2 ; exit 1 ; }

# load platform environment
. "${RUN_ENV_PLATFORM_PATH}/lib/platform-env" \
    || { echo "Could not load platform environment - exiting..." >&2 ; exit 1 ; }

# failure function
panicExit()
{
    test x"$1" = x \
        && echo "An error occurred - exiting..." >&2 \
        || echo "${1} - exiting..." >&2

    exit 1
}

# usage information
testVariableDefinition RUN_ENV_PLATFORM_DISPLAY_NAME || panicExit
APP_NAME=$(basename "$0")
APP_USAGE="
NAME

    $APP_NAME

DESCRIPTION

    $RUN_ENV_PLATFORM_DISPLAY_NAME platform management utility.

    This application requires root (or sudo) permissions.

SYNOPSIS

    $APP_NAME <-h|--help>
    $APP_NAME <COMMAND> [SUBCOMMAND|OPTION] [-v]

    $APP_NAME +active [BYTE_COUNT] [--check|--force] [-v]
    $APP_NAME get <VARIABLE>
    $APP_NAME grub <generate|show|write [-v]>
    $APP_NAME list [all]
    $APP_NAME save [savename=<SAVE_NAME>|savefile=</PATH/TO/FILE>] [-v]
    $APP_NAME set <VARIABLE> <VALUE>
    $APP_NAME status [all|device|platform|savefile|savename|savenames]
    $APP_NAME unset <VARIABLE>
    $APP_NAME usage [all|active|device|memory|ram|save|swap] [-h|--human]

OPTIONS

    -h,--help   Display this usage information and exit.

    +active     Allot additional memory to increase the platform's active
                storage capacity (when using active storage).

                Can also be used to check if an increase is \"necessary\"
                and/or \"safe\".

                    \"Necessary\" means the stored data has reached the
                    platform's active resize tolerance and an increase is
                    recommended.

                    \"Safe\" refers to whether there is enough free RAM/Swap
                    to fully support an increase. An increase requires little
                    additional memory up front, so is usually technically
                    safe, but the \"safe\" value is based on whether there is
                    enough space to make full use of the additional capacity
                    without affecting current RAM allotments.

                Accepts an optional number (in bytes) by which to expand the
                active storage capacity. If no BYTE_COUNT is provided, the
                platform's default increment is used.

                Accepts the following additional options:

                    --check     Check if an increase is safe and necessary.

                                Use this in combination with a BYTE_COUNT to
                                test the \"safe\" status of a specific size
                                increment.

                                Returns a binary mask exit code:

                                    0 = safe and necessary
                                    2 = not safe
                                    4 = not necessary
                                    6 = not safe or necessary

                                Add \"-v\" for a detailed explanation.

                    --force     Perform the increase even if there is not
                                enough RAM available.

                                Has no effect if \"--check\" is used.

                    -v          Verbose output.


    get         Retrieve a stored variable value. Requires a variable name.

    grub        Perform a Grub configuration SUBCOMMAND.

                Requires one SUBCOMMAND from the following:

                    generate    Display a new Grub configuration to standard
                                output (based on saves from the mounted boot
                                device).

                    show        Display the current Grub configuration used
                                by the mounted boot device.

                    write       Write a new Grub configuration to the
                                mounted boot device (based on saves from the
                                mounted boot device).

                Accepts the \"-v\" modifier for more verbose output when
                using the \"write\" SUBCOMMAND.

    list        Display stored variables and their values.

                Used primarily for debugging purposes.

                Accepts one SUBCOMMAND from the following:

                    all         Display all known variables, even if they
                                are not set or stored.

    save        Save to disk (or a target save file).

                Accepts one OPTION in the following format:

                    save savename=\"name_of_save_on_disk\"
                    save savefile=\"/path/to/save/file\"

                If no OPTION is provided, set variables or system defaults
                will be used.

                Accepts the \"-v\" modifier for more verbose output.

    set         Store a variable for later use. Requires a variable and
                value in either of the following formats:

                    set variable value
                    set variable=value

                Accepted variables are:

                    savefile, savename

    status      Report on current platform state and expected paths/values.
                Accepts an optional SUBCOMMAND to retrieve a specific state.

                Accepted SUBCOMMAND values are:

                    all         Display all states (default).

                    device      Show mounted boot device path (if mounted).

                    platform    Show platform name and version.

                    savefile    Show path to save image if \"save\" is
                                called without additional parameters.

                    savename    Show device save name that will be used if
                                \"save\" is called without additional
                                parameters.

                    savenames   Show existing save names from the mounted
                                boot device (if mounted).

                    store       \"active\" or \"save\" depending on whether
                                the save-to-ram feature was used at boot time.

    unset       Unassign and remove a stored variable. Requires a variable
                name.

    usage       Display memory and file system usage statistics. Shows values
                in bytes by default. Use \"-h\" or \"--human\" for human
                readable values.

                Accepts the following optional SUBCOMMANDS:

                    all         Display all values (even those not currently
                                applicable).

                    active      Display active data storage usage (if booted
                                with save-to-ram).

                    device      Display boot device usage (if mounted).

                    memory      Display memory usage. These values include
                                combined RAM and swap. An extra \"unallocated\"
                                field designates the amount of free memory that
                                has not already been allocated for active data
                                storage.

                                Note: The \"memory\" SUBCOMMAND provides the
                                same information as the \"total\" line in the
                                \"all\" SUBCOMMAND output.

                    ram         Display RAM memory usage.

                    save        Display save image usage (if booted directly
                                from save file).

                    swap        Display swap memory usage.
"
printUsage()
{
    echo "$APP_USAGE"
    test x"$1" = x || exit $1
}
case "$1" in -h | --help )
    printUsage 0
esac

# ensure root permissions
testRootUser || panicExit "Root permissions (or sudo) required"

# load boot configurations and options
BOOT_SAVE=""
PLATFORM_DEFAULT_SAVE=""
loadRunEnvConf || panicExit
updateBootOptions || panicExit

# make a decision whether the system booted directly from a save image
if test x"$BOOT_SAVE_TO_RAM" = x1; then
    is_save_file=0
else
    BOOT_SAVE_TO_RAM=0
    is_save_file=1
fi

# script paths
CMD_SAVE=${RUN_ENV_PLATFORM_PATH}/bin/save.sh
CMD_INCREASE_SAVE_SIZE=${RUN_ENV_PLATFORM_PATH}/bin/increase-save-size.sh
CMD_UPDATE_GRUB=${RUN_ENV_PLATFORM_PATH}/bin/update-grub.sh

# Other paths
testVariableDefinition MOUNT_DEVICE || panicExit
PATH_GRUB_CONFIG=${MOUNT_DEVICE}/boot/grub/grub.cfg

# load environment variables
testVariableDefinition RUN_ENV_DIRECTORY || panicExit
env_file=${RUN_ENV_DIRECTORY}/env_control
SAVENAME=""
SAVEFILE=""
test -f "$env_file" && . "$env_file"

###
### END CONFIG
###


### Local Functions

# writes environment variables back to the envfile
writeEnvFile()
{
    # Store control environment variables
    env_content="### AUTOGENERATED
### DO NOT EDIT
SAVENAME=\"$SAVENAME\"
SAVEFILE=\"$SAVEFILE\""
    mkdir -p "$(dirname "$env_file")" || return $?
    echo "$env_content" >"$env_file" || return $?
    return 0
}

# converts bytes to human readable format
bytesToHuman()
{
    # required
    local byte_count

    # local
    local size
    local suffix

    suffix=B

    byte_count=${1:-0}
    while test "${byte_count%%.*}" -ge 1024 -a "$suffix" != 'G'; do
        byte_count=$(echo "scale=10; ${byte_count} / 1024" | bc)
        case "$suffix" in
            B ) suffix=K ;;
            K ) suffix=M ;;
            M ) suffix=G ;;
        esac
    done

    byte_count=$(echo "scale=1; ${byte_count} / 1" | bc)

    echo "${byte_count}${suffix}"
}

# sets system usage statistics to public variables
setUsageStats()
{
    unset USAGE_DEVICE_TOTAL
    unset USAGE_DEVICE_USED
    unset USAGE_DEVICE_FREE
    unset USAGE_ACTIVE_TOTAL
    unset USAGE_ACTIVE_USED
    unset USAGE_ACTIVE_FREE
    unset USAGE_SAVE_TOTAL
    unset USAGE_SAVE_USED
    unset USAGE_SAVE_FREE
    unset USAGE_RAM_TOTAL
    unset USAGE_RAM_USED
    unset USAGE_RAM_FREE
    unset USAGE_SWAP_TOTAL
    unset USAGE_SWAP_USED
    unset USAGE_SWAP_FREE
    unset USAGE_MEMORY_TOTAL
    unset USAGE_MEMORY_USED
    unset USAGE_MEMORY_FREE
    unset USAGE_MEMORY_UNALLOCATED

    local disk_info
    local active_info
    local memory_info
    local a
    local b
    local c

    # boot disk information
    testVariableDefinition MOUNT_DEVICE || panicExit
    if testIsMounted "$MOUNT_DEVICE"; then
        disk_info=$(df -B1 "$MOUNT_DEVICE" | tail -n 1 | tr -s ' ' | cut -d ' ' -f 2-4) || return $?
        if test -n "$disk_info"; then
            if IFS=' ' read a b c; then
                USAGE_DEVICE_TOTAL=$a
                USAGE_DEVICE_USED=$b
                USAGE_DEVICE_FREE=$c
            fi <<EOF
$disk_info
EOF
        fi
    fi

    # active/save storage information
    active_info=$(df -B1 "$MOUNT_SAVE" | tail -n 1 | tr -s ' ' | cut -d ' ' -f 2-4) || return $?
    if test -n "$active_info"; then
        if IFS=' ' read a b c; then
            if test "$is_save_file" = 0; then
                USAGE_ACTIVE_TOTAL=$a
                USAGE_ACTIVE_USED=$b
                USAGE_ACTIVE_FREE=$c
            else
                USAGE_SAVE_TOTAL=$a
                USAGE_SAVE_USED=$b
                USAGE_SAVE_FREE=$c
            fi
        fi <<EOF
$active_info
EOF
    fi

    # memory (ram + swap) information
    memory_info=$(free -bt) || return $?
    ram_info=$(echo "$memory_info" | grep -i '^mem:' | tr -s ' ' | cut -d ' ' -f 2-4) || return $?
    swap_info=$(echo "$memory_info" | grep -i '^swap:' | tr -s ' ' | cut -d ' ' -f 2-4) || return $?
    memory_info=$(echo "$memory_info" | tail -n 1 | tr -s ' ' | cut -d ' ' -f 2-4) || return $?
    if test -n "$ram_info"; then
        if IFS=' ' read a b c; then
            USAGE_RAM_TOTAL=$a
            USAGE_RAM_USED=$b
            USAGE_RAM_FREE=$c
        fi <<EOF
$ram_info
EOF
    fi
    if test -n "$swap_info"; then
        if IFS=' ' read a b c; then
            USAGE_SWAP_TOTAL=$a
            USAGE_SWAP_USED=$b
            USAGE_SWAP_FREE=$c
        fi <<EOF
$swap_info
EOF
    fi
    if test -n "$memory_info"; then
        if IFS=' ' read a b c; then
            USAGE_MEMORY_TOTAL=$a
            USAGE_MEMORY_USED=$b
            USAGE_MEMORY_FREE=$c
        fi <<EOF
$memory_info
EOF
    fi

    USAGE_MEMORY_UNALLOCATED=0
    if test -n "$USAGE_MEMORY_FREE"; then
        USAGE_MEMORY_UNALLOCATED=$(($USAGE_MEMORY_FREE - ${USAGE_ACTIVE_FREE:-0}))
        test "$USAGE_MEMORY_UNALLOCATED" -lt 0 \
            && USAGE_MEMORY_UNALLOCATED=0
    fi

    return 0
}


# parse options
command="$1"
option="$2"
case "$command" in

    #
    # list - display stored variables and their values
    #
    list )      # test for allowed options
                if test -n "$option"; then
                    case "$option" in
                        all )   ;;
                        * )     panicExit "Unknown \"list\" option: $option" ;;
                    esac
                fi

                # show "all" variables or only those that are set
                test "$option" = all -o -n "$SAVENAME" && echo "savename=$SAVENAME"
                test "$option" = all -o -n "$SAVEFILE" && echo "savefile=$SAVEFILE"
                ;;

    #
    # get - retrieve stored variable values
    #
    get )       # print requested variable value
                case "$option" in
                    savename )  echo "$SAVENAME" ;;
                    savefile )  echo "$SAVEFILE" ;;
                    '' )        panicExit "Option \"get\" requires a variable to retrieve" ;;
                    * )         panicExit "Unknown \"get\" option: $option" ;;
                esac
                ;;

    #
    # set - assign and store variable values
    #
    set )       # extract variable and value from option
                case "$option" in
                    savename=* )    value=${option#savename=}
                                    option=savename
                                    ;;
                    savefile=* )    value=${option#savefile=}
                                    option=savefile
                                    ;;
                    savename | \
                    savefile )      value=$3
                                    ;;
                    '' )            panicExit "Option \"set\" requires a variable and a value" ;;
                    * )             panicExit "Unknown \"set\" option: $option" ;;
                esac

                # ensure a value is provided
                if test -n "$value"; then
                    # update stored variable values
                    case "$option" in
                        savename )  SAVENAME="$value"
                                    SAVEFILE=""
                                    writeEnvFile || panicExit
                                    ;;
                        savefile )  SAVEFILE="$value"
                                    SAVENAME=""
                                    writeEnvFile || panicExit
                                    ;;
                        '' )        panicExit "Option \"set\" requires a variable and a value" ;;
                        * )         panicExit "Unknown \"set\" option: $option" ;;
                    esac
                else
                    panicExit "Option \"set\" requires a variable and a value"
                fi
                ;;

    #
    # unset - unassign and remove stored variable values
    #
    unset )     # update stored variable values
                case "$option" in
                    savename )  SAVENAME="" && writeEnvFile || panicExit ;;
                    savefile )  SAVEFILE="" && writeEnvFile || panicExit ;;
                    '' )        panicExit "Option \"unset\" requires an option to unset" ;;
                    * )         panicExit "Unknown \"unset\" option: $option" ;;
                esac
                ;;

    #
    # status - report on current platform state and expected paths/values
    #
    status )    # check for invalid options
                case "$option" in
                    '' | all | platform | device | store | savename | savefile | savenames ) ;;
                    * ) panicExit "Unknown \"status\" option: $option" ;;
                esac

                # no option is the same as "all"
                test -z "$option" && option=all

                # determine if device is mounted
                case "$option" in all | device | savename | savefile | savenames )
                    testVariableDefinition MOUNT_DEVICE \
                        || panicExit
                    testIsMounted "$MOUNT_DEVICE" \
                        && device_mounted=1 \
                        || device_mounted=0
                esac

                format_label='%-11s'

                # platform
                case "$option" in platform | all )
                    # display platform's display name, real name, and version
                    testVariableDefinition RUN_ENV_PLATFORM_NAME || panicExit
                    testVariableDefinition RUN_ENV_PLATFORM_VERSION || panicExit
                    testVariableDefinition RUN_ENV_PLATFORM_DISPLAY_NAME || panicExit
                    test "$option" = all && printf "$format_label" "platform:"
                    echo "$RUN_ENV_PLATFORM_DISPLAY_NAME ($RUN_ENV_PLATFORM_NAME-$RUN_ENV_PLATFORM_VERSION)"
                esac

                # device
                case "$option" in device | all )
                    device=""
                    if test "$device_mounted" = 1; then
                        # get device path from expected mount path
                        testVariableDefinition MOUNT_DEVICE || panicExit
                        device=$(cat /proc/mounts | grep "\S\+\s\+$MOUNT_DEVICE\s" | cut -d ' ' -f 1) \
                            || panicExit
                    fi
                    if test "$device_mounted" = 0 -o -z "$device"; then
                        # display not mounted message
                        test "$option" = all && printf "$format_label" "device:"
                        echo "<not mounted>"
                    else
                        # follow any symbolic links to get the real device path
                        device=$(readlink -m "$device") || panicExit
                        # display device path
                        test "$option" = all && printf "$format_label" "device:"
                        echo "$device"
                    fi
                esac

                # store
                case "$option" in store | all )
                    test "$option" = all && printf "$format_label" "store:"
                    if test "$is_save_file" = 0; then
                        echo "active"
                    else
                        echo "save"
                    fi
                esac

                # savename
                case "$option" in savename | all )
                    # only show a value if the device is mounted and a specific
                    # save file is not designated
                    if test "$device_mounted" = 1 -a -z "$SAVEFILE"; then
                        test "$option" = all && printf "$format_label" "savename:"
                        # select the appropriate save name from (in order):
                        # set savename, boot option, platform default
                        if test -n "$SAVENAME"; then
                            echo "$SAVENAME"
                        elif test -n "$BOOT_SAVE"; then
                            echo "$BOOT_SAVE"
                        elif test -n "$PLATFORM_DEFAULT_SAVE"; then
                            echo "$PLATFORM_DEFAULT_SAVE"
                        fi
                    fi
                esac

                # savefile
                case "$option" in savefile | all )
                    if test -n "$SAVEFILE"; then
                        # always display if savefile has been set
                        test "$option" = all && printf "$format_label" "savefile:"
                        echo "$SAVEFILE"
                    elif test "$device_mounted" = 1; then
                        # otherwise, if the device is mounted,
                        # determine the save name and matching file path
                        savename=$SAVENAME
                        test -z "$savename" && savename=$BOOT_SAVE
                        test -z "$savename" && savename=$PLATFORM_DEFAULT_SAVE
                        test -z "$savename" \
                            && panicExit "Unable to determine an appropriate savename"
                        test "$option" = all && printf "$format_label" "savefile:"
                        echo "$(getSaveImagePath "$savename")" || panicExit
                    fi
                esac

                # savenames
                case "$option" in savenames | all )
                    if test "$device_mounted" = 1; then
                        # if the device is mounted, iterate over the children
                        # of the device's saves storage directory
                        dir_saves=$(getDeviceSavesDirectoryPath) || panicExit
                        if test -n "$dir_saves" -a -d "$dir_saves"; then
                            saves=$(getAbsoluteDirectoryList "$dir_saves") \
                                || panicExit
                            test "$option" = all && printf "$format_label" "savenames:"
                            first=1
                            echo "$saves" | while IFS= read -r i; do
                                # display the names of child directories
                                if test -d "$i"; then
                                    savename=$(basename "$i") || panicExit
                                    if test "$first" = 0; then
                                        test "$option" = all && printf "$format_label" ""
                                    fi
                                    echo "$savename"
                                    first=0
                                fi
                            done
                        fi
                    fi
                esac
                ;;

    #
    # usage - display file system and memory usage
    #
    usage )     # check for modifier
                modifier=$3
                case "$option" in -h | --human )
                    modifier=$option
                    option=$3
                esac

                # check for invalid options
                case "$option" in
                    '' | all | memory | ram | swap | active | save | device ) ;;
                    * ) panicExit "Unknown \"usage\" option: $option" ;;
                esac

                # load system usage information
                setUsageStats || panicExit

                # adjust active/save values
                if test "$is_save_file" = 0; then
                    USAGE_SAVE_TOTAL=-
                    USAGE_SAVE_USED=-
                    USAGE_SAVE_FREE=-
                else
                    USAGE_ACTIVE_TOTAL=-
                    USAGE_ACTIVE_USED=-
                    USAGE_ACTIVE_FREE=-
                fi

                # adjust device values
                testVariableDefinition MOUNT_DEVICE || panicExit
                device_mounted=0
                if testIsMounted "$MOUNT_DEVICE"; then
                    device_mounted=1
                else
                    USAGE_DEVICE_TOTAL=-
                    USAGE_DEVICE_USED=-
                    USAGE_DEVICE_FREE=-
                fi

                # default table format
                usage_format='%-8s %15s %15s %15s %15s\n'
                unallocated_header=''
                unallocated_unused=''
                case "$option" in memory | all | '' )
                    if test "$is_save_file" = 0; then
                        unallocated_header=unallocated
                        unallocated_unused=-
                    fi
                esac

                # check for modifiers
                case "$modifier" in -h | -human )
                    usage_format='%-8s %7s %7s %7s %8s\n'
                    if test -n "$unallocated_header"; then
                        unallocated_header=unalloc
                    fi
                    if test "$is_save_file" = 0; then
                        USAGE_ACTIVE_TOTAL=$(bytesToHuman "$USAGE_ACTIVE_TOTAL")
                        USAGE_ACTIVE_USED=$(bytesToHuman "$USAGE_ACTIVE_USED")
                        USAGE_ACTIVE_FREE=$(bytesToHuman "$USAGE_ACTIVE_FREE")
                    else
                        USAGE_SAVE_TOTAL=$(bytesToHuman "$USAGE_SAVE_TOTAL")
                        USAGE_SAVE_USED=$(bytesToHuman "$USAGE_SAVE_USED")
                        USAGE_SAVE_FREE=$(bytesToHuman "$USAGE_SAVE_FREE")
                    fi
                    if test "$device_mounted" = 1; then
                        USAGE_DEVICE_TOTAL=$(bytesToHuman "$USAGE_DEVICE_TOTAL")
                        USAGE_DEVICE_USED=$(bytesToHuman "$USAGE_DEVICE_USED")
                        USAGE_DEVICE_FREE=$(bytesToHuman "$USAGE_DEVICE_FREE")
                    fi
                    USAGE_RAM_TOTAL=$(bytesToHuman "$USAGE_RAM_TOTAL")
                    USAGE_RAM_USED=$(bytesToHuman "$USAGE_RAM_USED")
                    USAGE_RAM_FREE=$(bytesToHuman "$USAGE_RAM_FREE")
                    USAGE_SWAP_TOTAL=$(bytesToHuman "$USAGE_SWAP_TOTAL")
                    USAGE_SWAP_USED=$(bytesToHuman "$USAGE_SWAP_USED")
                    USAGE_SWAP_FREE=$(bytesToHuman "$USAGE_SWAP_FREE")
                    USAGE_MEMORY_TOTAL=$(bytesToHuman "$USAGE_MEMORY_TOTAL")
                    USAGE_MEMORY_USED=$(bytesToHuman "$USAGE_MEMORY_USED")
                    USAGE_MEMORY_FREE=$(bytesToHuman "$USAGE_MEMORY_FREE")
                    USAGE_MEMORY_UNALLOCATED=$(bytesToHuman "$USAGE_MEMORY_UNALLOCATED")
                esac

                # display usage table
                printf "$usage_format" '' 'total' 'used' 'free' "$unallocated_header"

                case "$option" in all | '' )
                    printf "%s\n" '[STORAGE]'
                esac

                # active
                case "$option" in active | all | '' )
                    if test "$option" = active \
                        -o "$option" = all \
                        -o "$is_save_file" = 0
                    then
                        printf "$usage_format" 'active:' \
                            "$USAGE_ACTIVE_TOTAL" \
                            "$USAGE_ACTIVE_USED" \
                            "$USAGE_ACTIVE_FREE" \
                            "$unallocated_unused"
                    fi
                esac

                # save
                case "$option" in save | all | '' )
                    if test "$option" = save \
                        -o "$option" = all \
                        -o "$is_save_file" != 0
                    then
                        printf "$usage_format" 'save:' \
                            "$USAGE_SAVE_TOTAL" \
                            "$USAGE_SAVE_USED" \
                            "$USAGE_SAVE_FREE" \
                            "$unallocated_unused"
                    fi
                esac

                # device
                case "$option" in device | all | '' )
                    if test "$option" = device \
                        -o "$option" = all \
                        -o "$device_mounted" != 0
                    then
                        printf "$usage_format" 'device:' \
                            "$USAGE_DEVICE_TOTAL" \
                            "$USAGE_DEVICE_USED" \
                            "$USAGE_DEVICE_FREE" \
                            "$unallocated_unused"
                    fi
                esac

                case "$option" in all | '' )
                    printf "%s\n" '[MEMORY]'
                esac

                # ram
                case "$option" in ram | all | '' )
                    printf "$usage_format" "ram:" \
                        "$USAGE_RAM_TOTAL" \
                        "$USAGE_RAM_USED" \
                        "$USAGE_RAM_FREE" \
                        "$unallocated_unused"
                esac

                # swap
                case "$option" in swap | all | '' )
                    printf "$usage_format" "swap:" \
                        "$USAGE_SWAP_TOTAL" \
                        "$USAGE_SWAP_USED" \
                        "$USAGE_SWAP_FREE" \
                        "$unallocated_unused"
                esac

                # memory
                case "$option" in memory | all | '' )
                    label='total:'
                    test "$option" = memory \
                        && label='memory:'
                    test "$is_save_file" = 0 \
                        && unallocated=$USAGE_MEMORY_UNALLOCATED \
                        || unallocated='-'
                    printf "$usage_format" "$label" \
                        "$USAGE_MEMORY_TOTAL" \
                        "$USAGE_MEMORY_USED" \
                        "$USAGE_MEMORY_FREE" \
                        "$unallocated"
                esac
                ;;

    #
    # save - store active storage content to a save file
    #
    save )      savename=""
                savefile=""

                # check for verbose modifier
                modifier=$3
                test "$option" = "-v" \
                    && modifier=$option \
                    && option=$3

                # determine savefile or savename
                if test -n "$option"; then
                    case "$option" in
                        savename=* )    savename="${option#savename=}" ;;
                        savefile=* )    savefile="${option#savefile=}" ;;
                        * )             panicExit "Unknown \"save\" option: $option" ;;
                    esac
                else
                    if test -n "$SAVEFILE"; then
                        savefile="$SAVEFILE"
                        test "$modifier" = "-v" \
                            && echo "Using save file: $savefile"
                    else
                        testVariableDefinition MOUNT_DEVICE || panicExit
                        if testIsMounted "$MOUNT_DEVICE"; then
                            if test -n "$SAVENAME"; then
                                savename="$SAVENAME"
                                test "$modifier" = "-v" \
                                    && echo "Using save name: $savename"
                            else
                                if test -n "$BOOT_SAVE"; then
                                    savename="$BOOT_SAVE"
                                    test "$modifier" = "-v" \
                                        && echo "Using boot-time save name: $savename"
                                elif test -n "$PLATFORM_DEFAULT_SAVE"; then
                                    savename="$PLATFORM_DEFAULT_SAVE"
                                    test "$modifier" = "-v" \
                                        && echo "Using platform-default save name: $savename "
                                fi
                            fi
                        else
                            panicExit "Boot device is not mounted"
                        fi
                    fi
                fi

                # save using savefile or savename
                if test -n "$savefile"; then
                    $CMD_SAVE -f "$savefile" || panicExit
                elif test -n "$savename"; then
                    testVariableDefinition MOUNT_DEVICE || panicExit
                    if testIsMounted "$MOUNT_DEVICE"; then
                        $CMD_SAVE -s "$savename" || panicExit
                    else
                        panicExit "Boot device is not mounted"
                    fi
                else
                    panicExit "Option \"save\" requires a valid \"savename\" or \"savefile\" value"
                fi
                ;;

    #
    # +active - alot additional RAM to increase the active storage capacity
    #
    +active )   # only valid when using active storage
                test "$is_save_file" != 0 \
                    && panicExit "Option \"+active\" is only valid when using active storage"

                testVariableDefinition MOUNT_SAVE || panicExit
                testVariableDefinition PLATFORM_IMAGE_VOLUME_ACTIVE_SIZE_INCREMENT || panicExit
                testVariableDefinition PLATFORM_IMAGE_VOLUME_ACTIVE_RESIZE_TOLERANCE || panicExit

                # verbose prefixes
                PREFIX_ACTIVE_FREE="Active Free:"
                PREFIX_BYTES_INCREASE="Requested Increase:"
                PREFIX_IS_NECESSARY="Necessary:"
                PREFIX_IS_SAFE="Safe:"
                PREFIX_MEMORY_UNALLOCATED="Memory Unallocated:"
                PREFIX_MEMORY_FREE="Memory Free:"
                PREFIX_RESIZE_TOLERANCE="Resize Tolerance:"

                # clear command from arguments
                shift

                # parse options
                is_check=0
                is_force=0
                is_verbose=0
                bytes_increase=$PLATFORM_IMAGE_VOLUME_ACTIVE_SIZE_INCREMENT
                for i in "$@"; do
                    case "$i" in
                        --check )   is_check=1 ;;
                        --force )   is_force=1 ;;
                        -v )        is_verbose=1 ;;

                        * )         if test "$(echo "$i" | sed 's/[^0-9]//')" = "$i"; then
                                        bytes_increase=$i
                                    else
                                        panicExit "Unknown \"+active\" option: $i"
                                    fi
                                    ;;
                    esac
                done

                # sync before testing filesystems
                sync || panicExit

                # read system usage information
                setUsageStats

                # check if needs increase
                is_necessary=0
                test "$USAGE_ACTIVE_FREE" -lt "$PLATFORM_IMAGE_VOLUME_ACTIVE_RESIZE_TOLERANCE" \
                    && is_necessary=1

                # check if safe for increase
                is_safe=0
                test "$USAGE_MEMORY_UNALLOCATED" -gt "$bytes_increase" \
                    && is_safe=1

                # display status
                if test x"$is_verbose" = x1; then

                    format_string='%-21s%7s\n'
                    format_number='%-21s%7s (%s)\n'

                    # resize tolerance
                    printf "$format_number" "$PREFIX_RESIZE_TOLERANCE" \
                        "$(bytesToHuman "$PLATFORM_IMAGE_VOLUME_ACTIVE_RESIZE_TOLERANCE")" \
                        "$PLATFORM_IMAGE_VOLUME_ACTIVE_RESIZE_TOLERANCE" \
                        || panicExit

                    # active free
                    printf "$format_number" "$PREFIX_ACTIVE_FREE" \
                        "$(bytesToHuman "$USAGE_ACTIVE_FREE")" \
                        "$USAGE_ACTIVE_FREE" \
                        || panicExit

                    # memory free
                    printf "$format_number" "$PREFIX_MEMORY_FREE" \
                        "$(bytesToHuman "$USAGE_MEMORY_FREE")" \
                        "$USAGE_MEMORY_FREE" \
                        || panicExit

                    # memory after active
                    printf "$format_number" "$PREFIX_MEMORY_UNALLOCATED" \
                        "$(bytesToHuman "$USAGE_MEMORY_UNALLOCATED")" \
                        "$USAGE_MEMORY_UNALLOCATED" \
                        || panicExit

                    # bytes increase
                    printf "$format_number" "$PREFIX_BYTES_INCREASE" \
                        "$(bytesToHuman "$bytes_increase")" \
                        "$bytes_increase" \
                        || panicExit
                fi

                # display necessary / safe
                if test x"$is_check" = x1 -o x"$is_verbose" = x1; then

                    format_string=${format_string:-'%-12s%s\n'}

                    # is necessary
                    printf "$format_string" "$PREFIX_IS_NECESSARY" \
                        "$(test x"$is_necessary" = x1 && echo Yes || echo No)" \
                        || panicExit

                    # is safe
                    printf "$format_string" "${PREFIX_IS_SAFE}" \
                        "$(test x"$is_safe" = x1 && echo Yes || echo No)" \
                        || panicExit
                fi

                # check or perform increase
                if test x"$is_check" = x1; then

                    # result is a binary mask
                    # error codes correspond to bits
                    result=0
                    test x"$is_safe" = x1      || result=$(($result+2))
                    test x"$is_necessary" = x1 || result=$(($result+4))
                    exit $result

                else

                    if test x"$is_safe" = x1 -o x"$is_force" = x1; then
                        test x"$is_verbose" = x1 \
                            && echo "Increasing active storage capacity"
                        # increase active volume size
                        increaseActiveImageAndVolumeSize "$bytes_increase" || panicExit
                    else
                        panicExit "Increase may be unsafe (use --force to override)"
                    fi

                fi
                ;;

    #
    # grub - manage the Grub configuration (show, generate, or write)
    #
    grub )      testVariableDefinition MOUNT_DEVICE || panicExit
                testIsMounted "$MOUNT_DEVICE" \
                    || panicExit "Boot device is not mounted"

                # check for verbose modifier
                modifier=$3
                test "$option" = "-v" \
                    && modifier=$option \
                    && option=$3

                # perform selected option
                case "$option" in

                    #
                    # show - display the current Grub configuration
                    #
                    show )      test -f "$PATH_GRUB_CONFIG" \
                                    || panicExit "Could not locate file: $PATH_GRUB_CONFIG"
                                cat "$PATH_GRUB_CONFIG" || panicExit
                                ;;

                    #
                    # generate - create and display (but do not store) a new
                    #            Grub configuration based on current saves
                    #
                    generate )  $CMD_UPDATE_GRUB || panicExit
                                ;;

                    #
                    # write - create and store a new Grub configuration, making
                    #         a backup if a previous configuration existed
                    #
                    write )     # ensure grub directory exists
                                test "$modifier" = '-v' \
                                    && echo "Verifying Grub configuration directory..."
                                dir_grub_config=$(dirname "$PATH_GRUB_CONFIG") \
                                    && test -d "$dir_grub_config" \
                                    || panicExit "Grub configuration directory not found"

                                # generate a new configuration
                                test "$modifier" = '-v' \
                                    && echo "Generating updated Grub configuration..."
                                updated_grub_config=$($CMD_UPDATE_GRUB) \
                                    || panicExit

                                # make a backup of the current config
                                if test -f "$PATH_GRUB_CONFIG"; then
                                    test "$modifier" = '-v' \
                                        && echo "Backing up current Grub configuration..."
                                    cp "$PATH_GRUB_CONFIG" "$PATH_GRUB_CONFIG~" \
                                        || panicExit
                                fi

                                # write the new configuration to disk
                                test "$modifier" = '-v' \
                                    && echo "Writing Grub configuration..."
                                echo "$updated_grub_config" >"$PATH_GRUB_CONFIG" \
                                    || panicExit

                                test "$modifier" = '-v' && echo "Done."
                                ;;

                    '' )        panicExit "Option \"grub\" requires a subcommand option"
                                ;;

                    * )         panicExit "Unknown \"grub\" option: $option"
                                ;;
                esac
                ;;

    '' )        printUsage 1 ;;

    * )         panicExit "Unknown option: $command" ;;

esac
