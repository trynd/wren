#!/bin/sh
#
# NAME
#
#   platform-env
#
# DESCRIPTION
#
#   Utility platform environment variables and methods.
#
# AUTHOR
#
#   Originally written by Michael Spencer.
#   Maintained by the Wren project developers.
#
#
# The Wren project; Copyright 2013-2015 the Wren project developers.
# See the COPYRIGHT file in the top-level directory of this distribution
# for individual attributions.
#
# This file is part of the Wren project. It is subject to the license terms
# in the LICENSE file found in the top-level directory of this distribution.
# No part of the Wren project, including this file, may be copied, modified,
# propagated, or distributed except according to the terms contained in the
# LICENSE file.
#
# This program comes with ABSOLUTELY NO WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# LICENSE file found in the top-level directory of this distribution for
# more details.
#

# Define the platform name and version (no whitespace allowed).
RUN_ENV_PLATFORM_NAME=wren
RUN_ENV_PLATFORM_VERSION=0.2.0

# Define the platform's display name if not defined externally.
if test x"$RUN_ENV_PLATFORM_DISPLAY_NAME" = x; then
    RUN_ENV_PLATFORM_DISPLAY_NAME="Wren"
fi

# Define mount points.
MOUNT_ENV=/mnt/$RUN_ENV_PLATFORM_NAME
MOUNT_IMAGES=$MOUNT_ENV/xx-images
MOUNT_VOLUMES=$MOUNT_ENV/xx-volumes
MOUNT_DEVICE=$MOUNT_ENV/00-device
MOUNT_ROOT=$MOUNT_ENV/01-root
MOUNT_PLATFORM=$MOUNT_ENV/02-platform
MOUNT_PLATFORM_UNION=$MOUNT_ENV/03-platform-union
MOUNT_SAVE=$MOUNT_ENV/04-save
MOUNT_TMP=$MOUNT_ENV/xx-tmp
MOUNT_SAVE_TMP=$MOUNT_ENV/xx-save-tmp
MOUNT_SNAPSHOT_TMP=$MOUNT_ENV/xx-snapshot-tmp

# Define volume/subvolume names and paths.
VOLUME_NAME_ACTIVE=active
SUBVOLUME_NAME_ROOT=@
SUBVOLUME_NAME_SNAPSHOT=@snapshot

# Define runtime environment paths.
RUN_ENV_DIRECTORY=/var/run/$RUN_ENV_PLATFORM_NAME
RUN_ENV_DIRECTORY_CONF=$RUN_ENV_DIRECTORY/conf
RUN_ENV_DIRECTORY_PROC=$RUN_ENV_DIRECTORY/proc
RUN_ENV_DIRECTORY_TMP=/tmp/$RUN_ENV_PLATFORM_NAME

# Determine and define command paths.
CMD_BTRFS=`which btrfs` || CMD_BTRFS=btrfs
CMD_DU=`which du` || CMD_DU=du
CMD_SORT=`which sort` || CMD_SORT=sort
CMD_STAT=`which stat` || CMD_STAT=stat
CMD_SWAPON=`which swapon` || CMD_SWAPON=swapon
CMD_SWAPOFF=`which swapoff` || CMD_SWAPOFF=swapoff

# Determine if environment variable is defined with a non-empty value.
testVariableDefinition()
{
    # required
    local name

    name=$1

    test x"$name" = x && { echo "Variable name is required" >&2 ; return 1 ; }
    eval "test x\"\$$name\" = x" && { echo "$name is not defined" >&2 ; return 1 ; }

    return 0
}

# Determine if current user is root user (uid=0).
testRootUser()
{
    # local
    local uid

    uid=`id -u`

    test x"$uid" = x0
    return $?
}

# Source (load and run) runtime environment config files.
loadRunEnvConf()
{
    testVariableDefinition RUN_ENV_DIRECTORY_CONF || return $?

    # local
    local i
    local path

    for i in \
        "device.conf" \
        "boot.conf" \
        "platform.conf"
    do
        path=$RUN_ENV_DIRECTORY_CONF/$i
        test -f "$path" && . "$path" || return $?
    done

    return 0
}

# Read boot options (/proc/cmdline) and set requested boot option variables.
updateBootOptions()
{
    # local
    local prefix
    local test_mode
    local skip_root
    local skip_platform
    local skip_save
    local root_to_ram
    local platform_to_ram
    local save_to_ram
    local to_ram
    local unmount
    local save
    local swap
    local swap_wait
    local no_active_fs
    local i
    local param
    local boot_device

    prefix=$RUN_ENV_PLATFORM_NAME-

    test_mode=test-mode
    skip_root=skip-root
    skip_platform=skip-platform
    skip_save=skip-save
    root_to_ram=root-to-ram
    platform_to_ram=platform-to-ram
    save_to_ram=save-to-ram
    to_ram=to-ram
    unmount=unmount
    save=save
    swap=swap
    swap_wait=swap-wait
    no_active_fs=no-active-fs

    # empty string values
    BOOT_DEVICE=''

    # read kernel boot options
    for i in $(cat /proc/cmdline); do

        # set the boot device info if it was defined
        boot_device=${i#root=}
        if test x"$i" != x"$boot_device"; then
            BOOT_DEVICE=$boot_device
            continue
        fi

        # Skip options not prefixed with platform name
        param=${i#${prefix}}
        test x"$i" = x"$param" && continue

        case $param in

            # test mode
            $test_mode=0        )   BOOT_TEST_MODE=0 ;;
            $test_mode | \
            $test_mode=1        )   BOOT_TEST_MODE=1 ;;

            # skip root
            $skip_root=0        )   BOOT_SKIP_ROOT=0 ;;
            $skip_root | \
            $skip_root=1        )   BOOT_SKIP_ROOT=1 ;;

            # skip platform
            $skip_platform=0    )   BOOT_SKIP_PLATFORM=0 ;;
            $skip_platform | \
            $skip_platform=1    )   BOOT_SKIP_PLATFORM=1 ;;

            # skip save
            $skip_save=0        )   BOOT_SKIP_SAVE=0 ;;
            $skip_save | \
            $skip_save=1        )   BOOT_SKIP_SAVE=1 ;;

            # root to ram
            $root_to_ram=0      )   BOOT_ROOT_TO_RAM=0
                                    BOOT_UNMOUNT=0
                                    ;;
            $root_to_ram | \
            $root_to_ram=1      )   BOOT_ROOT_TO_RAM=1 ;;

            # platform to ram
            $platform_to_ram=0  )   BOOT_PLATFORM_TO_RAM=0
                                    BOOT_UNMOUNT=0
                                    ;;
            $platform_to_ram | \
            $platform_to_ram=1  )   BOOT_PLATFORM_TO_RAM=1 ;;

            # save to ram
            $save_to_ram=0      )   BOOT_SAVE_TO_RAM=0
                                    BOOT_UNMOUNT=0
                                    ;;
            $save_to_ram | \
            $save_to_ram=1      )   BOOT_SAVE_TO_RAM=1 ;;

            # to ram
            $to_ram=0           )   BOOT_ROOT_TO_RAM=0
                                    BOOT_PLATFORM_TO_RAM=0
                                    BOOT_SAVE_TO_RAM=0
                                    BOOT_UNMOUNT=0
                                    ;;
            $to_ram | \
            $to_ram=1           )   BOOT_ROOT_TO_RAM=1
                                    BOOT_PLATFORM_TO_RAM=1
                                    BOOT_SAVE_TO_RAM=1
                                    ;;

            # unmount
            $unmount=0          )   BOOT_UNMOUNT=0 ;;
            $unmount | \
            $unmount=1          )   BOOT_UNMOUNT=1
                                    BOOT_ROOT_TO_RAM=1
                                    BOOT_PLATFORM_TO_RAM=1
                                    BOOT_SAVE_TO_RAM=1
                                    ;;

            # save
            $save=*             )   BOOT_SAVE=${param#${save}=}
                                    ;;

            # swap
            $swap=*             )   BOOT_SWAP=${param#${swap}=}
                                    ;;

            # swap wait
            $swap_wait=*        )   BOOT_SWAP_WAIT=${param#${swap_wait}=}
                                    ;;

            # no active fs
            $no_active_fs=0    )   BOOT_NO_ACTIVE_FS=0 ;;
            $no_active_fs | \
            $no_active_fs=1    )   BOOT_NO_ACTIVE_FS=1 ;;
        esac
    done

    return 0
}

# Remove any slashes from start of string and echo back result string.
trimLeadingSlashes()
{
    local x
    local y
    x=$1
    y=${x#/}
    while test x"$x" != x"$y"; do
        x=$y
        y=${x#/}
    done
    echo "$x"
}

# Remove any slashes from end of string and echo back result string.
trimTrailingSlashes()
{
    local x
    local y
    x=$1
    y=${x%/}
    while test x"$x" != x"$y"; do
        x=$y
        y=${x%/}
    done
    echo "$x"
}

# Echo a sorted list of directory contents.
# If no directory path is given, defaults to the present working directory.
getDirectoryList()
{
    # optional
    local directory
    # local
    local result
    local basename
    local code

    directory=${1:-.}

    test -d "$directory" \
        || { code=$? ; echo "\"$directory\" is not a valid directory" >&2 ; return $code ; }

    result=`for i in "${directory%/}"/* "${directory%/}"/.*; do echo "$i"; done` || return $?
    result=`echo "$result" | $CMD_SORT` || return $?

    echo "$result" | while IFS= read -r i; do
        if test x"$i" != x; then
            basename=`basename "$i"`
            case "$basename" in
                '*' ) ;;
                '.*' ) ;;
                '.' ) ;;
                '..' ) ;;
                * ) echo "$basename" ;;
            esac
        fi
    done

    return 0
}

# Echo a sorted list of directory contents as absolute paths (meaning prefixed
# with the absolute directory path).
# If no directory path is given, defaults to the present working directory.
getAbsoluteDirectoryList()
{
    # optional
    local directory
    # local
    local result

    directory=`readlink -m ${1:-.}` || return $?
    result=`getDirectoryList "$directory"` || return $?
    directory=${directory%/}
    echo "$result" | while IFS= read -r i; do
        echo "$directory/$i"
    done

    return 0
}

# Sets up a loop device for the provided image file.
# If no loop device path is provided, defaults to the first unused loop device.
loopImage()
{
    # required
    local image
    # optional
    local loop

    image=$1
    loop=$2

    test x"$image" = x && { echo "Image file path required" >&2 ; return 1 ; }
    test -f "$image" || { echo "Image file does not exist" >&2 ; return 1 ; }
    test x"$loop" = x && { loop=`losetup -f` || return $? ; }
    sleep 1
    losetup "$loop" "$image" || return $?

    return 0
}

# Detach the file or device associated with the specified loop device path.
# If the loop device is busy, will try to free the device up to 5 times before
# giving up.
unloopLoop()
{
    # required
    local loop
    # local
    local deleted
    local counter

    loop=$1

    test x"$loop" = x && { echo "Loop device path required" >&2 ; return 1 ; }

    losetup "$loop" 1>/dev/null 2>&1
    test x"$?" = x0 || { echo "Could not find loop device \"$loop\"" ; return 1 ; }

    # attempt to free loop device up to 5 times before giving up
    deleted=0
    counter=0
    while test "$deleted" -eq 0 -a "$counter" -lt 5; do
        losetup -d "$loop" 2>/dev/null \
            && deleted=1 \
            || sleep 1
        counter=$(($counter+1))
    done
    test "$deleted" -eq 0 \
        && { echo "Could not free loop device \"$loop\"" ; return 1 ;}

    return 0
}

# Detach the provided image file from its associated loop device (if currently
# looped)
unloopImage()
{
    # required
    local image
    # local
    local loop

    image=$1

    test x"$image" = x && { echo "Image file path required" >&2 ; return 1 ; }
    loop=`getImageLoop "$image"` || return $?
    unloopLoop "$loop" || return $?

    return 0
}

# Return the loop device path for the provided image file (if currently looped)
getImageLoop()
{
    # required
    local image
    # local
    local result

    image=$1

    test x"$image" = x && { echo "Image file path required" >&2 ; return 1 ; }
    test -f "$image" || { echo "Image file does not exist" >&2 ; return 1 ; }
    result=`losetup -j "$image"` || return $?
    test x"$result" = x && return 1
    result=`echo "$result" | sed 's/^[[:space:]]*//'` || return $?
    result=`echo "$result" | sed 's/:.*//'` || return $?
    echo "$result"

    return 0
}

# Determine whether the provided image file is currently looped (meaning is
# associated with a loop device)
testImageLooped()
{
    # required
    local image

    image=$1

    getImageLoop "$image" 1>/dev/null 2>&1
    return $?
}

# Determine whether a given directory is currently acting as a mount point.
# A full/absolute directory path is required.
testIsMounted()
{
    # required
    local full_path_to_directory
    # local
    local result

    full_path_to_directory=$1

    result=`cat /proc/mounts` || return $?
    result=`echo "$result" | sed -e 's/^[[:space:]]*//'` || return $?
    result=`echo "$result" | sed -e 's/[[:space:]]\+/ /g'` || return $?
    result=`echo "$result" | cut -d' ' -f2` || return $?
    result=`echo "$result" | grep "^${full_path_to_directory%/}/\?\$"` || return $?

    return 0
}

# Create a tmpfs (temporary RAM filesystem) mount at the given mount point path.
# An optional name for the mount can be provided to make unmounting easier.
# The tmpfs mount is created with no restriction on block or inode count, so
# external manual/automated RAM observance and maintence is recommended.
mountTmpfs()
{
    # required
    local mount
    # optional
    local name

    mount=$1
    name=$2

    test x"$mount" = x && { echo "Mount path required" >&2 ; return 1 ; }
    test x"$name" = x && name=tmpfs
    mount -t tmpfs -o noatime,nr_blocks=0,nr_inodes=0 "$name" "$mount" || return $?

    return 0
}

# Loop and mount an image file of the given filesystem type for read-only (ro)
# or read-write (rw) access (and any other provided mount options) at the
# specified mount point path. An optional loop device path may be provided,
# otherwise it defaults to the first available loop device.
mountImage()
{
    # required
    local fs_type
    local ro_rw_options
    local image
    local mount
    # optional
    local loop

    fs_type=$1
    ro_rw_options=$2
    image=$3
    mount=$4
    loop=$5

    test x"$fs_type" = x && { echo "Filesystem type required" >&2 ; return 1 ; }
    test x"$ro_rw_options" = x && { echo "Mount mode option (ro/rw) required" >&2 ; return 1 ; }
    test x"$image" = x && { echo "Image path required" >&2 ; return 1 ; }
    test x"$mount" = x && { echo "Mount path required" >&2 ; return 1 ; }
    test x"$loop" = x && { loop=$(losetup -f) || return $? ; }
    loopImage "$image" "$loop" || return $?
    mount -t "$fs_type" -o "$ro_rw_options",noatime,loop "$loop" "$mount" || return $?

    return 0
}

# Perform a union mount of a lower and upper directory path for read-only (ro)
# or read-write (rw) access (and any other provided mount options) at the
# specified mount point path. An optional name for the mount can be provided to
# make unmounting easier.
mountUnion()
{
    # required
    local ro_rw_options
    local lower
    local upper
    local mount
    # optional
    local name

    ro_rw_options=$1
    lower=$2
    upper=$3
    mount=$4
    name=$5

    test x"$ro_rw_options" = x && { echo "Mount mode option (ro/rw) required" >&2 ; return 1 ; }
    test x"$lower" = x && { echo "Lower directory path required" >&2 ; return 1 ; }
    test x"$upper" = x && { echo "Upper directory path required" >&2 ; return 1 ; }
    test x"$mount" = x && { echo "Mount path required" >&2 ; return 1 ; }
    test x"$name" = x && name=overlayfs
    mount -t overlayfs -o "${ro_rw_options}",noatime,lowerdir="$lower",upperdir="$upper" "$name" "$mount" \
        || return $?

    return 0
}

# Determine an absolute path to the image storage directory on the predetermined
# mount device (typically a hard disk used to boot the machine).
getDeviceImagesDirectoryPath()
{
    testVariableDefinition DEVICE_DIRECTORY_IMAGES || return $?
    testVariableDefinition MOUNT_DEVICE || return $?

    # local
    local result

    result=$DEVICE_DIRECTORY_IMAGES
    result=`trimLeadingSlashes "$result"` || return $?
    result=`trimTrailingSlashes "$result"` || return $?
    result=$MOUNT_DEVICE/$result
    echo "$result"

    return 0
}

# Determine an absolute path to the storage directory used to save device users'
# content on the predetermined mount device (typically a hard disk used to boot
# the machine).
getDeviceSavesDirectoryPath()
{
    testVariableDefinition DEVICE_DIRECTORY_SAVES || return $?
    testVariableDefinition MOUNT_DEVICE || return $?

    # local
    local result

    result=$DEVICE_DIRECTORY_SAVES
    result=`trimLeadingSlashes "$result"` || return $?
    result=`trimTrailingSlashes "$result"` || return $?
    result=$MOUNT_DEVICE/$result
    echo "$result"

    return 0
}

# Determine an absolute path to the device-user-specific save directory, as
# determined by the save name. If no save name is provided, defaults to the
# save name provided at boot time. If no save name was provided at boot,
# subsequently defaults to the platform-defined save name default (which should
# always be defined).
getSaveDirectoryPath()
{
    # optional
    local save_name
    # local
    local result

    save_name=$1

    if test x"$save_name" != x; then
        result="`getDeviceSavesDirectoryPath`/$save_name" || return $?
    elif test x"$BOOT_SAVE" != x ; then
        result="`getDeviceSavesDirectoryPath`/$BOOT_SAVE" || return $?
    elif test x"$PLATFORM_DEFAULT_SAVE" != x ; then
        result="`getDeviceSavesDirectoryPath`/$PLATFORM_DEFAULT_SAVE" || return $?
    else
        echo "Neither BOOT_SAVE or PLATFORM_DEFAULT_SAVE are defined" >&2
        return 1
    fi
    echo "$result"

    return 0
}

# Determine an absolute path to the most appropriate root image file to use
# for a boot procedure. First checks the appropriate device-user-specific save
# directory, then (if not found) subsequently checks the device images
# directory. Uses the default (platform defined) root image name if found, or
# subsequently checks for version numbered variants (newest version available).
# An optional save name may be provided if an alternate save path is preferred.
getExistingRootImagePath()
{
    testVariableDefinition PLATFORM_IMAGE_ROOT || return $?

    # optional
    local save_name
    # local
    local result

    save_name=$1

    result="`getSaveDirectoryPath "$save_name"`/$PLATFORM_IMAGE_ROOT" || return $?
    test -f "$result" \
        || result=`getNewestExistingVersionedFilePath "$result"` \
        || result="`getDeviceImagesDirectoryPath`/$PLATFORM_IMAGE_ROOT" \
        || return $?
    test -f "$result" \
        || result=`getNewestExistingVersionedFilePath "$result"` \
        || return $?
    test -f "$result" || return $?

    echo "$result"

    return 0
}

# Determine an absolute path for a platform image file (using the default
# platform defined file name) in the appropriate device-user-specific save
# directory. File existence is not checked, so the primary intent of this
# function is to determine where to write a new device-user-specific platform
# image file. An optional save name may be provided if an alternate save path
# is preferred.
getSavePlatformImagePath()
{
    testVariableDefinition PLATFORM_IMAGE_PLATFORM || return $?

    # optional
    local save_name
    # local
    local result

    save_name=$1

    result=`getSaveDirectoryPath "$save_name"`/$PLATFORM_IMAGE_PLATFORM || return $?

    echo "$result"

    return 0
}

# Determine an absolute path to the most appropriate platform image file to use
# for a boot procedure. First checks the appropriate device-user-specific save
# directory, then (if not found) subsequently checks the device images
# directory. Uses the default (platform defined) platform image name if found,
# or subsequently checks for version numbered variants (newest version
# available). An optional save name may be provided if an alternate save path is
# preferred.
getExistingPlatformImagePath()
{
    testVariableDefinition PLATFORM_IMAGE_PLATFORM || return $?

    # optional
    local save_name
    # local
    local result

    save_name=$1

    result="`getSaveDirectoryPath "$save_name"`/$PLATFORM_IMAGE_PLATFORM" || return $?
    test -f "$result" \
        || result=`getNewestExistingVersionedFilePath "$result"` \
        || result="`getDeviceImagesDirectoryPath`/$PLATFORM_IMAGE_PLATFORM" \
        || return $?
    test -f "$result" \
        || result=`getNewestExistingVersionedFilePath "$result"` \
        || return $?
    test -f "$result" || return $?

    echo "$result"

    return 0
}

# Determine an absolute path for a save image file (using the default
# platform defined file name) in the appropriate device-user-specific save
# directory. File existence is not checked, so the primary intent of this
# function is to determine where to write a new device-user-specific save
# image file. An optional save name may be provided if an alternate save path is
# preferred.
getSaveImagePath()
{
    testVariableDefinition PLATFORM_IMAGE_SAVE || return $?

    # optional
    local save_name
    # local
    local result

    save_name=$1

    result="`getSaveDirectoryPath "$save_name"`" || return $?
    result="$result/$PLATFORM_IMAGE_SAVE"

    echo "$result"

    return 0
}

# Determine an absolute path to the most appropriate save image file from the
# appropriate device-user-specific save directory to use for a boot procedure.
# Uses the default (platform defined) save image name if found, or subsequently
# checks for version numbered variants (newest version available). An optional
# save name may be provided if an alternate save path is preferred.
getExistingSaveImagePath()
{
    # optional
    local save_name
    # local
    local result

    save_name=$1

    result="`getSaveImagePath "$save_name"`" || return $?
    test -f "$result" \
        || result=`getNewestExistingVersionedFilePath "$result"` \
        || return $?
    test -f "$result" || return $?

    echo "$result"

    return 0
}

# Copy the specified file to the specified directory. The directory will be
# created if it does not exist.
copyFileTo()
{
    # required
    local file
    local directory
    # local
    local filename

    file=$1
    directory=$2
    test x"$file" = x \
        && { echo "File not defined for copy" >&2 ; return 1 ; }
    test -f "$file" \
        || { echo "File \"$file\" not found" >&2 ; return 1 ; }
    test x"$directory" = x \
        && { echo "Directory not defined for copy" >&2 ; return 1 ; }
    filename=`basename "$file"` || return $?
    mkdir -p "$directory" || return $?
    cp "$file" "$directory/$filename" || return $?

    return 0
}

# Copy the specified file to the images mount point directory.
copyFileToImages()
{
    testVariableDefinition MOUNT_IMAGES || return $?
    copyFileTo "$1" "$MOUNT_IMAGES" || return $?

    return 0
}

# Determine the size (in bytes) of the specified file.
getFileSize()
{
    test x"$1" = x && { echo "File path required" >&2 ; return 1 ; }
    test -f "$1" || { echo "\"$1\" is not a file" >&2 ; return 1 ; }

    echo `$CMD_STAT -c%s "$1"` || return $?

    return 0
}

# Determine disk usage (in bytes) of the specified file or directory.
getDiskUsage()
{
    test x"$1" = x && { echo "File or directory path required" >&2 ; return 1 ; }
    test -e "$1" || { echo "\"$1\" does not exist" >&2 ; return 1 ; }

    # local
    local result

    result=`$CMD_DU -B1 -sx "$1"` || return $?
    result=`echo "$result" | sed -e 's/^[[:space:]]*//'` || return $?
    result=`echo "$result" | sed -e 's/[[:space:]]\+/ /g'` || return $?
    result=`echo "$result" | cut -d' ' -f1` || return $?

    echo "$result"

    return 0
}

# Increase the max file size of the provided sparse image by the number of
# bytes specified.
increaseSparseImageSize()
{
    # required
    local image_path
    local bytes_increase

    image_path=$1
    bytes_increase=$2

    test x"$image_path" = x \
        && { echo "Image path required" >&2 ; return 1 ; }
    test x"$bytes_increase" = x \
        && { echo "Increase amount (in bytes) required" >&2 ; return 1 ; }

    test -f "$image_path" \
        || { echo "Could not locate image file: $image_path" >&2 ; return 1 ; }

    truncate -c -s +"$bytes_increase" "$image_path" 1>/dev/null \
        || { result=$? ; echo "Could not increase image file size" >&2 ; return $result ; }

    # if the image file has as associated loop device, reinitialize its capacity
    image_loop=`getImageLoop "$image_path"` 2>/dev/null \
        || image_loop=""
    if test x"$image_loop" != x; then
        losetup -c "$image_loop" 1>/dev/null \
            || { result=$? ; echo "Could not reset image loop device capacity" >&2 ; return $result ; }
    fi

    return 0
}

# Determine the appropriate file path (by process name) to use for a PID
# (Process ID) file. This file is typically used as a simple locking mechanism
# to ensure only one instance of a known process is run at a time, and also as
# a storage location for the process instance's ID.
getPidFilePath()
{
    testVariableDefinition RUN_ENV_DIRECTORY_PROC || return $?

    # required
    local name
    # local
    local path

    name=$1
    test x"$name" = x && { echo "Process name required" >&2 ; return 1 ; }
    path=$RUN_ENV_DIRECTORY_PROC/$name.pid
    echo "$path"

    return 0
}

# Determine if the PID (Process ID) file for a named process is absent. If the
# PID file is absent, it is an indicator that the process is probably not
# running.
testNoPidFile()
{
    testVariableDefinition RUN_ENV_DIRECTORY_PROC || return $?

    # required
    local name
    # local
    local path

    name=$1
    test x"$name" = x && { echo "Process name required" >&2 ; return 1 ; }

    path=`getPidFilePath "$name"` || return $?
    test -e "$path" \
        && { echo "PID file found - Process already running?" >&2 ; return 1 ; }

    return 0
}

# Create a new PID (Process ID) file for a named process and store the provided
# PID value in the created file.
createPidFile()
{
    testVariableDefinition RUN_ENV_DIRECTORY_PROC || return $?

    # required
    local name
    local pid
    # local
    local path

    name=$1
    pid=$2

    test x"$name" = x && { echo "Process name required" >&2 ; return 1 ; }
    test x"$pid" = x && { echo "Process ID required" >&2 ; return 1 ; }

    path=`getPidFilePath "$name"` || return $?
    testNoPidFile "$name" || return $?
    mkdir -p `dirname "$path"` || return $?
    echo "$pid" >$path || return $?

    return 0
}

# Delete the PID (Process ID) file for the named process. This assumes there
# is only one instance of the process running.
deletePidFile()
{
    # required
    local name
    # local
    local path

    name=$1
    test x"$name" = x && { echo "Process name required" >&2 ; return 1 ; }
    path=`getPidFilePath "$name"` || return $?
    test -e "$path" \
        && unlink "$path" 1>/dev/null 2>&1 \
        || return $?

    return 0
}

# Enables the specified swap-formatted device or image file (by path) for use
# as additional system swap space. This function is typically used in
# conjunction with running tmpfs file systems to allow memory swapping to an
# external device on machines with low RAM.
enableSwap()
{
    # this method is intended as a wrapper for swapon
    # prefix path string with "LABEL=" or "UUID=" if required

    # required
    local path

    path=$1
    test x"$path" = x \
        && { echo "Device or swap file path required" >&2 ; return 1 ; }
    case "$path" in
        LABEL=* ) $CMD_SWAPON -d -L "${path#LABEL=}" ;;
        UUID=* ) $CMD_SWAPON -d -U "${path#UUID=}" ;;
        * ) $CMD_SWAPON -d "$path" ;;
    esac

    return $?
}

# Sort a provided list of arguments by version name and number (assumes GNU
# version numbering), oldest to newest.
sortByVersion()
{
    # local
    local result
    local i

    result=`for i in "$@"; do echo "$i"; done` \
        && result=`echo "$result" | $CMD_SORT --version-sort` \
        || return $?

    echo "$result"

    return 0
}

# Sort a provided list of arguments by version name and number (assumes GNU
# version numbering), newest to oldest.
reverseSortByVersion()
{
    # local
    local result
    local i

    result=`for i in "$@"; do echo "$i"; done` \
        && result=`echo "$result" | $CMD_SORT --version-sort --reverse` \
        || return $?

    echo "$result"

    return 0
}

# Sort a provided list of arguments by version name and number (assumes GNU
# version numbering), and return the newest (last) item in the list.
getNewestVersion()
{
    echo "`sortByVersion "$@" | tail -n1`" \
        && return 0 \
        || return $?
}

# Sort a provided list of arguments by version name and number (assumes GNU
# version numbering), and return the oldest (first) item in the list.
getOldestVersion()
{
    echo "`sortByVersion "$@" | head -n1`" \
        && return 0 \
        || return $?
}

# Given a base path, generates a list of all version numbered instances of that
# path, sorts them by version number, and returns the newest (last) one found.
# The path is verified as existing before successful completion.
getNewestExistingVersionedPath()
{
    # required
    local path
    # local
    local i
    local result

    path=$1

    result=`for i in "${path%/}"-*; do test -e "$i" && echo "$i"; done` \
        && result=`getNewestVersion "$result"`

    test x"$result" != x -a -e "$result" \
        && echo "$result" \
        || return $?

    return 0
}

# Given a base file path, generates a list of all version numbered instances of
# that path, sorts them by version number, and returns the newest (last) one
# found. The path is verified as an existing file before successful completion.
getNewestExistingVersionedFilePath()
{
    # required
    local file_path
    # local
    local i
    local result

    file_path=$1

    result=`for i in "$file_path"-*; do test -f "$i" && echo "$i"; done` \
        && result=`getNewestVersion "$result"`

    test x"$result" != x -a -f "$result" \
        && echo "$result" \
        || return $?

    return 0
}

# Given a base directory path, generates a list of all version numbered
# instances of that path, sorts them by version number, and returns the newest
# (last) one found. The path is verified as an existing directory before
# successful completion.
getNewestExistingVersionedDirectoryPath()
{
    # required
    local directory_path
    # local
    local i
    local result

    directory_path=$1

    result=`for i in "${directory_path%/}"-*; do test -d "$i" && echo "$i"; done` \
        && result=`getNewestVersion "$result"`

    test x"$result" != x -a -d "$result" \
        && echo "$result" \
        || return $?

    return 0
}


###
### VOLUME MANAGEMENT
###


# Determine an absolute path for the (in-memory) active volume image file,
# which serves as RAM-based storage for active device-user-specific save
# content.
getActiveVolumeImagePath()
{
    testVariableDefinition MOUNT_IMAGES || return $?
    testVariableDefinition PLATFORM_IMAGE_VOLUME_ACTIVE || return $?

    echo "$MOUNT_IMAGES/$PLATFORM_IMAGE_VOLUME_ACTIVE"

    return 0
}

# Determine an absolute path for the (in-memory) active volume, which maps to
# the active volume image and serves as RAM-based storage for active
# device-user-specific save content.
getActiveVolumePath()
{
    testVariableDefinition MOUNT_VOLUMES || return $?
    testVariableDefinition VOLUME_NAME_ACTIVE || return $?

    echo "$MOUNT_VOLUMES/$VOLUME_NAME_ACTIVE"

    return 0
}

# Determine an absolute path for the (in-memory) active volume root subvolume,
# which serves as RAM-based storage for the active device-user-specific save
# content's root file system tree.
getActiveVolumeRootSubvolumePath()
{
    # local
    local active_volume_path

    testVariableDefinition SUBVOLUME_NAME_ROOT || return $?

    active_volume_path=`getActiveVolumePath` || return $?

    echo "$active_volume_path/$SUBVOLUME_NAME_ROOT"

    return 0
}

# Determine an absolute path for the (in-memory) active volume snapshot
# subvolume, which serves as RAM-based delta storage during save-to-disk
# procedures.
getActiveVolumeRootSnapshotSubvolumePath()
{
    # local
    local active_volume_root_subvolume_path

    active_volume_root_subvolume_path=`getActiveVolumeRootSubvolumePath`\
        || return $?

    getSubvolumeSnapshotPath "$active_volume_root_subvolume_path" || return $?

    return 0
}

# Determine an appropriate (standardized) path for a snapshot created from the
# provided subvolume.
getSubvolumeSnapshotPath()
{
    # required
    local base_subvolume_path

    testVariableDefinition SUBVOLUME_NAME_SNAPSHOT || return $?

    base_subvolume_path=$1

    test x"$base_subvolume_path" = x \
        && { echo "Base subvolume path required" >&2 ; return 1 ; }

    echo "$base_subvolume_path$SUBVOLUME_NAME_SNAPSHOT"

    return 0
}

# Create a subvolume snapshot based on the specified subvolume at the provided
# snapshot subvolume path.
createSubvolumeSnapshot()
{
    # required
    local base_subvolume_path
    local snapshot_subvolume_path

    base_subvolume_path=$1
    snapshot_subvolume_path=$2

    test x"$base_subvolume_path" = x \
        && { echo "Base subvolume path required" >&2 ; return 1 ; }
    test x"$snapshot_subvolume_path" = x \
        && { echo "Snapshot subvolume path required" >&2 ; return 1 ; }

    $CMD_BTRFS subvolume snapshot -r \
        "$base_subvolume_path" \
        "$snapshot_subvolume_path" \
        1>/dev/null \
        || return $?

    return 0
}

# Delete the specified subvolume (by subvolume path) from its parent volume.
deleteSubvolume()
{
    # required
    local subvolume_path

    subvolume_path=$1

    test x"$subvolume_path" = x \
        && { echo "Subvolume path required" >&2 ; return 1 ; }

    $CMD_BTRFS subvolume delete "$subvolume_path" 1>/dev/null || return $?

    return 0
}

increaseVolumeSizeToMax()
{
    # required
    local volume_path

    volume_path=$1

    test x"$volume_path" = x \
        && { echo "Volume path required" >&2 ; return 1 ; }

    test -d "$volume_path" \
        || { echo "Could not locate volume: $volume_path" >&2 ; return 1 ; }

    $CMD_BTRFS filesystem resize max "$volume_path" 1>/dev/null \
        || { result=$? ; echo "Could not resize volume" >&2 ; return $result ; }

    return 0
}

increaseImageAndVolumeSize()
{
    # required
    local volume_image_path
    local volume_path
    local bytes_increase

    volume_image_path=$1
    volume_path=$2
    bytes_increase=$3

    test x"$volume_image_path" = x \
        && { echo "Volume image path required" >&2 ; return 1 ; }
    test x"$volume_path" = x \
        && { echo "Volume path required" >&2 ; return 1 ; }
    test x"$bytes_increase" = x \
        && { echo "Increase amount (in bytes) required" >&2 ; return 1 ; }

    test -f "$volume_image_path" \
        || { echo "Could not locate volume image: $volume_image_path" >&2 ; return 1 ; }
    test -d "$volume_path" \
        || { echo "Could not locate volume: $volume_path" >&2 ; return 1 ; }

    increaseSparseImageSize "$volume_image_path" "$bytes_increase" || return $?

    increaseVolumeSizeToMax "$volume_path" || return $?

    return 0
}

increaseActiveImageAndVolumeSize()
{
    # optional
    local bytes_increase

    bytes_increase=$1
    if test x"$bytes_increase" = x; then
        # use default value if it is available
        testVariableDefinition PLATFORM_IMAGE_VOLUME_ACTIVE_SIZE_INCREMENT \
            && bytes_increase=$PLATFORM_IMAGE_VOLUME_ACTIVE_SIZE_INCREMENT \
            || { echo "Size increase (byte count) required." >&2 ; return 1 ; }
    fi

    volume_image_path=`getActiveVolumeImagePath` \
        || { result=$? ; echo "Could not determine active volume image path" >&2 ; return $result ; }

    volume_path=`getActiveVolumePath` \
        || { result=$? ; echo "Could not determine active volume path" >&2 ; return $result ; }

    increaseImageAndVolumeSize "$volume_image_path" "$volume_path" "$bytes_increase" \
        || return $?

    return 0
}


###
### SYSTEM STATE
###

testIsCurrentActiveImage()
{
    # required
    local image_path

    # local
    local loop

    testVariableDefinition MOUNT_SAVE || return $?

    image_path=$1

    if test -n "$image_path"; then
        if test -f "$image_path"; then
            if loop=`getImageLoop "$image_path"`; then
                cat /proc/mounts \
                    | tr -s '\t' ' ' \
                    | cut -d ' ' -f 1-2 \
                    | grep "^$loop $MOUNT_SAVE$" > /dev/null \
                    && return 0
            fi
        fi
    else
        echo "Image path required" >&2
    fi

    return 1
}

testIsActiveImageSave()
{
    # local
    local save_image_path

    save_image_path=`getExistingSaveImagePath` || return $?
    testIsCurrentActiveImage "$save_image_path"
    return $?
}

testIsActiveImageActiveVolume()
{
    # local
    local active_volume_image_path

    active_volume_image_path=`getActiveVolumeImagePath` || return $?
    testIsCurrentActiveImage "$active_volume_image_path"
    return $?
}
